quit()
quit()
q()
install.packages(c("dplyr;", "data.table;", "plyr;", "lattice;", "ggplot2;", "shiny"))
install.packages(c("dplyr", "plyr", "ggplot2", "lattice", "data.table", "XLConnect", "lubridate"))
source('C:/Users/Roy/Desktop/mfte.R')
source('d:/onedrive/phd work/dissertation/programming/resilience.R')
Resilience(1,2,3,4,5,6)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shiny::runApp('D:/OneDrive/PhD Work/Dissertation/Programming/App')
quit()
rstan()
Sys.setenv(MAKEFLAGS = "-j4")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
Sys.getenv("PATH")
system('g++ -v')
system('where make')
library(rstan)
Sys.setenv(MAKEFLAGS = "-j4")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
quit()
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3", file = M, sep = "\n", append = TRUE)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", dependencies = TRUE)
library(rstan)
library devtools
library('devtools')
source_url("https://github.com/stan-dev/shinystan/raw/develop/install_shinystan.R")
install_shinystan()
install.packages(c("curl", "lattice", "RcppEigen", "rversions", "shinyBS", "stringi", "XML"))
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib="D:/R/R-3.2.1/library")
install.packages("dygraphs")
source_url("https://github.com/stan-dev/shinystan/raw/develop/install_shinystan.R")
install_shinystan()
Sys.getenv("PATH")
system('g++ -v')
system('where make')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
library("rstan", lib.loc="~/R/win-library/3.2")
library("shiny", lib.loc="~/R/win-library/3.2")
library("shinyStan", lib.loc="~/R/win-library/3.2")
install.packages(c("base64enc", "curl", "evaluate", "git2r", "httpuv", "knitr", "mapdata", "mapproj", "maps", "PKI", "R6", "Rcpp", "rJava", "RUnit", "scales", "shiny", "shinyBS"))
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib="C:/R/R-3.2.1/library")
install.packages("installr")
library("installr", lib.loc="~/R/win-library/3.2")
if(!require(installr)){install.packages("installr"); require(installr)}
updateR()
quit()
source('D:/OneDrive/PhD Work/Dissertation/Programming/ResRatio/ratioPlot.R')
install.packages('packrat')
quit()
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
Sys.getenv("R_LIBS_USER")
wkdir()
quit()
library("installr", lib.loc="~/R/win-library/3.2")
install.packages("installr")
library("installr", lib.loc="~/R/win-library/3.2")
updater()
R.version()
R.Version()
install.packages(c("BH", "curl", "data.table", "devtools", "digest", "dygraphs", "evaluate", "formatR", "ggplot2", "git2r", "gridExtra", "gtable", "highr", "Hmisc", "htmltools", "htmlwidgets", "httr", "jsonlite", "knitr", "latticeExtra", "loo", "lubridate", "mapdata", "maps", "matrixStats", "memoise", "munsell", "packrat", "R6", "Rcpp", "RcppEigen", "RCurl", "rJava", "roxygen2", "rsconnect", "rstan", "rstudioapi", "RUnit", "scales", "shiny", "sp", "StanHeaders", "stringi", "testthat", "threejs", "timeSeries", "XML", "xtable"))
library("XLConnect", lib.loc="~/R/win-library/3.2")
getwd()
setwd('d:/onedrive/phd work/dissertation/programming/shinyres')
getwd()
h <- readWorksheetFromFile(hFile.xlsx)
ls
ls()
dir()
h <- readWorksheetFromFile('hFile.xlsx')
wb = loadWorkbook('hFile.xlsx')
wb
hDat <- readWorksheet(wb)
hDat <- readWorksheet('wb')
hDat <- readWorksheet(wb, sheet1)
hDat <- readWorksheet(wb, Sheet1)
hDat <- readWorksheet(wb, 'Sheet1')
library('ggplot2')
p <- ggplot(hDat, aes(Time, Run))
p
hDat[1:5, :]
hDat[1:5]
hDat[[1]]
hDat[[1]][[2]]
hDat[[1]][[:]]
hDat[[1]][[1:3]]
hDat[[1]][1:3]
hDat$Time[1]
p <- ggplot(hDat, aes(Time, Run)) + geom_line()
p
p <- ggplot(hDat, aes(Time, value, color=variable)) + geom_line()
p
p <- ggplot(hDat, aes(Time, value, color=variable)) + geom_smooth()
p
p <- ggplot(hDat, aes(Time, value, color=variable)) + geom_smooth() + geom_point()
p
p
p <- ggplot(hDat, aes(Time, value, color=variable)) + geom_smooth() + geom_line()
p
quit()
